#ifdef GL_ES
precision mediump float;
#endif

#define LUMA(COLOR) (COLOR.r * 0.2126 + COLOR.g * 0.7152 + COLOR.b * 0.0722)

#define FXAA_EDGE_THRESHOLD (1.0 / 4.0)
#define FXAA_EDGE_THRESHOLD_MIN (1.0 / 16.0)
#define FXAA_REDUCE_MUL 0.0
#define FXAA_REDUCE_MIN (1.0 / 128.0)
#define FXAA_SPAN_MAX 8.0

varying vec2 v_texCoord0;
uniform sampler2D frameBuffer;
uniform vec2 frameBufferPixelSize;
void main()
{
	vec2 subPixelOffset = frameBufferPixelSize * 0.5;

	vec3 rgbNW = texture2D(frameBuffer, vec2(v_texCoord0.x - subPixelOffset.x, v_texCoord0.y - subPixelOffset.y)).rgb;
	vec3 rgbNE = texture2D(frameBuffer, vec2(v_texCoord0.x + subPixelOffset.x, v_texCoord0.y - subPixelOffset.y)).rgb;
	vec3 rgbM = texture2D(frameBuffer, v_texCoord0).rgb;
	vec3 rgbSW = texture2D(frameBuffer, vec2(v_texCoord0.x - subPixelOffset.x, v_texCoord0.y + subPixelOffset.y)).rgb;
	vec3 rgbSE = texture2D(frameBuffer, vec2(v_texCoord0.x + subPixelOffset.x, v_texCoord0.y + subPixelOffset.y)).rgb;
	
	float lumaNW = LUMA(rgbNW);
	float lumaNE = LUMA(rgbNE);
	float lumaM = LUMA(rgbM);
	float lumaSW = LUMA(rgbSW);
	float lumaSE = LUMA(rgbSE);
	
	float rangeMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float rangeMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
	float range = rangeMax - rangeMin;
	
	// blow off non edge area
	if(range < max(FXAA_EDGE_THRESHOLD_MIN, rangeMax * FXAA_EDGE_THRESHOLD)) {
		gl_FragColor = vec4(rgbM, 1.0);
	} else {
		vec2 dir = vec2(
			-((lumaNW + lumaNE) - (lumaSW + lumaSE)),
			((lumaNW + lumaSW) - (lumaNE + lumaSE)));
			
		float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * 0.25 * FXAA_REDUCE_MUL, FXAA_REDUCE_MIN);
		float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
		dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * frameBufferPixelSize;
		
		vec3 rgbA = (1.0 / 2.0) * (
			texture2D(frameBuffer, v_texCoord0 + dir * (1.0/3.0 - 0.5)).rgb +
			texture2D(frameBuffer, v_texCoord0 + dir * (2.0/3.0 - 0.5)).rgb);
		vec3 rgbB = rgbA * (1.0 / 2.0) + (1.0 / 4.0) * (
			texture2D(frameBuffer, v_texCoord0 + dir * (0.0/3.0 - 0.5)).rgb +
			texture2D(frameBuffer, v_texCoord0 + dir * (3.0/3.0 - 0.5)).rgb);
		float lumaB = LUMA(rgbB);
		if (lumaB < rangeMin || lumaB > rangeMax) {
			gl_FragColor = vec4(rgbA, 1.0);
		} else {
			gl_FragColor = vec4(rgbB, 1.0);
		}
	}
}